// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.AI.DocumentTranslation.Models;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.DocumentTranslation
{
    /// <summary> The QuestionAnsweringText service client. </summary>
    public partial class QuestionAnsweringTextClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal QuestionAnsweringTextRestClient RestClient { get; }

        /// <summary> Initializes a new instance of QuestionAnsweringTextClient for mocking. </summary>
        protected QuestionAnsweringTextClient()
        {
        }

        /// <summary> Initializes a new instance of QuestionAnsweringTextClient. </summary>
        /// <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.api.cognitiveservices.azure.com). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public QuestionAnsweringTextClient(Uri endpoint, AzureKeyCredential credential, QuestionAnsweringClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new QuestionAnsweringClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "Ocp-Apim-Subscription-Key"));
            RestClient = new QuestionAnsweringTextRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Initializes a new instance of QuestionAnsweringTextClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Supported Cognitive Services endpoint (e.g., https://&lt;resource-name&gt;.api.cognitiveservices.azure.com). </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal QuestionAnsweringTextClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2021-05-01-preview")
        {
            RestClient = new QuestionAnsweringTextRestClient(clientDiagnostics, pipeline, endpoint, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary> Answers the specified question using the provided text in the body. </summary>
        /// <param name="textQueryParameters"> Post body of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TextAnswers>> QueryAsync(TextQueryParameters textQueryParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("QuestionAnsweringTextClient.Query");
            scope.Start();
            try
            {
                return await RestClient.QueryAsync(textQueryParameters, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Answers the specified question using the provided text in the body. </summary>
        /// <param name="textQueryParameters"> Post body of the request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TextAnswers> Query(TextQueryParameters textQueryParameters, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("QuestionAnsweringTextClient.Query");
            scope.Start();
            try
            {
                return RestClient.Query(textQueryParameters, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
